{"version":3,"file":"component---src-pages-index-tsx-6a3934da47f1e23fe3fd.js","mappings":"+KAiHA,UAvGuCA,KAErC,MAAM,EAACC,EAAO,EAAEC,IAAcC,EAAAA,EAAAA,UAAiB,KACzC,EAACC,EAAK,EAAEC,IAAYF,EAAAA,EAAAA,UAAiB,KACrC,EAACG,EAAK,EAAEC,IAAYJ,EAAAA,EAAAA,WAAkB,IACtC,EAACK,EAAI,EAAEC,IAAWN,EAAAA,EAAAA,WAAkB,IACpC,EAACO,EAAS,EAAEC,IAAgBR,EAAAA,EAAAA,UAAiB,GAoB7CS,EAAWC,IACf,MAAMC,EAAmB,GAAHC,QAAAC,EAAAA,EAAAA,GAAOZ,GAAK,CAAE,CAACS,OAAMI,MAAK,KAChDZ,EAASS,EAAS,EAGdI,EAAWA,CAACL,EAAcM,KAC9B,MAAML,GAAgBE,EAAAA,EAAAA,GAAOZ,GAC7BU,EAASK,GAAON,KAAOA,EACvBR,EAASS,GACTL,GAAQ,EAAM,EAiBhB,OACEW,EAAAA,cAAA,OAAKC,UAAU,8BACbD,EAAAA,cAAA,MAAIC,UAAU,8BAA6B,YACzCb,GACAY,EAAAA,cAAA,KAAGC,UAAU,QAAO,mBAEnBb,GACDY,EAAAA,cAAA,KAAGC,UAAU,QAAO,yBAEtBD,EAAAA,cAAA,QAAME,SArDYC,IACpBA,EAAEC,iBACa,KAAZvB,IACW,IAATO,EACDU,EAASjB,EAASS,GAGlBE,EAAQX,GAEVC,EAAW,IACXK,GAAS,IAGTA,GAAS,EACX,EAuCgCc,UAAU,QACtCD,EAAAA,cAAA,SAAOK,KAAK,OACZJ,UAAW,oEAAmEf,EAAQ,2BAA6B,8BACnHoB,SAAUH,IACRrB,EAAWqB,EAAEI,OAAOC,OACE,KAAnBL,EAAEI,OAAOC,OACVrB,GAAS,EACX,EACGqB,MAAO3B,IACZmB,EAAAA,cAAA,UAAQC,UAAU,wJAAuJ,SAIzKf,GACAc,EAAAA,cAAA,KAAGC,UAAU,gBAAe,+BAE9BD,EAAAA,cAAA,OAAKC,UAAU,QAEbjB,EAAMyB,KAAI,CAACC,EAAYX,IACnBC,EAAAA,cAAA,OAAKW,IAAKZ,EAAOE,UAAU,qBACzBD,EAAAA,cAAA,UAAQC,UAAU,qDAClBW,QAAST,IACPZ,EAAaQ,GACbV,GAAQ,GACRP,EAAW4B,EAAKjB,KAAK,GACpB,MAGHO,EAAAA,cAAA,SAAOa,MAAO,CAACC,eAAgBJ,EAAKb,KAAO,eAAiB,IAAKI,UAAU,kBAAkBS,EAAKjB,MAClGO,EAAAA,cAAA,SAAOK,KAAK,WAAWJ,UAAU,eAAec,QAASL,EAAKb,KAAMS,SAAUA,IA5ClEP,KACtB,MAAML,GAAgBE,EAAAA,EAAAA,GAAOZ,GAC7BU,EAASK,GAAOF,MAAQH,EAASK,GAAOF,KACxCZ,EAASS,EAAS,EAyC4EsB,CAAejB,KACnGC,EAAAA,cAAA,UAAQC,UAAU,0CAA0CW,QAASA,IArD7Db,KAClB,GAAGkB,OAAOC,QAAQ,8CAA8C,CAC9D,MAAMxB,GAAgBE,EAAAA,EAAAA,GAAOZ,GAC7BU,EAASyB,OAAOpB,EAAM,GACtBd,EAASS,EACX,GAgDqF0B,CAAWrB,IAAQ,UAQlG,EAMH,MAAMsB,EAAeA,IAAMrB,EAAAA,cAAA,aAAO,Y","sources":["webpack://react-todo/./src/pages/index.tsx"],"sourcesContent":["import type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useState } from 'react';\nimport '../styles/App.css';\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface Task {\n  name: string;\n  done: boolean;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n\n  const [newTask, setNewTask] = useState<string>('');\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [alert, setAlert] = useState<boolean>(false);\n  const [edit, setEdit] = useState<boolean>(false);\n  const [editIndex, setEditIndex] = useState<number>(0);\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault();\n    if(newTask !== ''){\n      if(edit === true){\n        editTask(newTask, editIndex);\n      }\n      else{\n        addTask(newTask);\n      }\n      setNewTask('');\n      setAlert(false);\n    }\n    else{\n      setAlert(true);\n    }\n    \n  }\n\n  const addTask = (name: string) => {\n    const newTasks: Task[] = [...tasks, {name, done:false}];\n    setTasks(newTasks);\n  }\n\n  const editTask = (name: string, index: number) => {\n    const newTasks: Task[] = [...tasks]\n    newTasks[index].name = name;\n    setTasks(newTasks);\n    setEdit(false);\n  }\n\n  const removeTask = (index: number) => {\n    if(window.confirm('Are you sure you want to delete this task?')){\n      const newTasks: Task[] = [...tasks];\n      newTasks.splice(index,1);\n      setTasks(newTasks);\n    }\n  }\n\n  const toggleDoneTask = (index: number) => {\n    const newTasks: Task[] = [...tasks];\n    newTasks[index].done = !newTasks[index].done;\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className='w-[95%] max-w-2xl mx-auto '>\n      <h1 className='text-xl font-semibold mt-2'>ToDo App</h1>\n      { edit &&\n        <p className='mt-2'>Edit the task:</p>\n      }\n      { !edit &&\n        <p className='mt-2'>Introduce a new task:</p>\n      }\n      <form onSubmit={handleSubmit} className=\"flex\">\n        <input type=\"text\"\n        className={`block p-2.5 w-full text-gray-900 rounded-l-lg border-l-2 border ${alert ? \"bg-red-50 border-red-300\" : \"bg-gray-50 border-gray-300\"}`} \n        onChange={e => {\n          setNewTask(e.target.value);\n          if(e.target.value !== ''){\n            setAlert(false);\n          }\n          }} value={newTask} />\n        <button className='top-0 right-0 p-2.5 text-white bg-blue-700 rounded-r-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300'>\n          Save\n        </button>\n      </form>\n      { alert &&\n        <p className='text-red-500'>You can't add an empty task</p>\n      }\n      <div className='mt-2'>\n      {\n        tasks.map((task: Task, index: number) => (\n            <div key={index} className=\"flex items-center\">\n              <button className='bg-yellow-300 w-6 mr-2 rounded hover:bg-yellow-500'\n              onClick={e => {\n                setEditIndex(index);\n                setEdit(true);\n                setNewTask(task.name);\n              }}>\n                ðŸ–‰\n              </button>\n              <label style={{textDecoration: task.done ? \"line-through\" : \"\"}} className='w-full text-lg'>{task.name}</label>\n              <input type=\"checkbox\" className='w-4 h-4 mx-2' checked={task.done} onChange={() => toggleDoneTask(index)} />\n              <button className='bg-red-300 w-6 rounded hover:bg-red-500' onClick={() => removeTask(index)}>\n                ðŸ—‘\n              </button>\n            </div>\n          )\n        )\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Home Page</title>\n"],"names":["IndexPage","newTask","setNewTask","useState","tasks","setTasks","alert","setAlert","edit","setEdit","editIndex","setEditIndex","addTask","name","newTasks","concat","_toConsumableArray","done","editTask","index","React","className","onSubmit","e","preventDefault","type","onChange","target","value","map","task","key","onClick","style","textDecoration","checked","toggleDoneTask","window","confirm","splice","removeTask","Head"],"sourceRoot":""}