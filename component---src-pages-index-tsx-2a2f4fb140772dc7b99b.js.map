{"version":3,"file":"component---src-pages-index-tsx-2a2f4fb140772dc7b99b.js","mappings":"+KAkHA,UAxGuC,KAErC,MAAM,EAACA,EAAO,EAAEC,IAAcC,EAAAA,EAAAA,UAAiB,KACzC,EAACC,EAAK,EAAEC,IAAYF,EAAAA,EAAAA,UAAiB,KACrC,EAACG,EAAK,EAAEC,IAAYJ,EAAAA,EAAAA,WAAkB,IACtC,EAACK,EAAI,EAAEC,IAAWN,EAAAA,EAAAA,WAAkB,IACpC,EAACO,EAAS,EAAEC,IAAgBR,EAAAA,EAAAA,UAAiB,GAqB7CS,EAAWC,IACf,MAAMC,EAAmB,GAAH,eAAOV,GAAK,CAAE,CAACS,OAAME,MAAK,KAChDV,EAASS,EAAS,EAGdE,EAAW,CAACH,EAAcI,KAC9B,MAAMH,GAAmB,OAAIV,GAC7BU,EAASG,GAAOJ,KAAOA,EACvBR,EAASS,GACTL,GAAQ,EAAM,EAiBhB,OACES,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,8BACbD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,8BAA6B,8CACzCX,GACAU,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,QAAO,mBAEnBX,GACDU,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,QAAO,yBAEtBD,EAAAA,cAAAA,OAAAA,CAAME,SAtDYC,IACpBA,EAAEC,iBACa,KAAZrB,IACW,IAATO,EACDQ,EAASf,EAASS,GAGlBE,EAAQX,GAEVC,EAAW,IACXK,GAAS,IAGTA,GAAS,GAGXgB,OAAOC,QAAQC,aAAa,KAAM,GAAIF,OAAOG,SAASC,SAAS,EAsC/BR,UAAU,QACtCD,EAAAA,cAAAA,QAAAA,CAAOU,KAAK,OACZT,UAAY,oEAAkEb,EAAQ,2BAA6B,8BACnHuB,SAAUR,IACRnB,EAAWmB,EAAES,OAAOC,OACE,KAAnBV,EAAES,OAAOC,OACVxB,GAAS,EACX,EACGwB,MAAO9B,IACZiB,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,wJAAuJ,SAIzKb,GACAY,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,gBAAe,+BAE9BD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,QAEbf,EAAM4B,KAAI,CAACC,EAAYhB,IACnBC,EAAAA,cAAAA,MAAAA,CAAKgB,IAAKjB,EAAOE,UAAU,qBACzBD,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,qDAClBgB,QAASd,IACPV,EAAaM,GACbR,GAAQ,GACRP,EAAW+B,EAAKpB,KAAK,GACpB,MAGHK,EAAAA,cAAAA,QAAAA,CAAOkB,MAAO,CAACC,eAAgBJ,EAAKlB,KAAO,eAAiB,IAAKI,UAAU,kBAAkBc,EAAKpB,MAClGK,EAAAA,cAAAA,QAAAA,CAAOU,KAAK,WAAWT,UAAU,eAAemB,QAASL,EAAKlB,KAAMc,SAAU,IA5ClEZ,KACtB,MAAMH,GAAmB,OAAIV,GAC7BU,EAASG,GAAOF,MAAQD,EAASG,GAAOF,KACxCV,EAASS,EAAS,EAyC4EyB,CAAetB,KACnGC,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,0CAA0CgB,QAAS,IArD7DlB,KAClB,GAAGM,OAAOiB,QAAQ,8CAA8C,CAC9D,MAAM1B,GAAmB,OAAIV,GAC7BU,EAAS2B,OAAOxB,EAAM,GACtBZ,EAASS,EACX,GAgDqF4B,CAAWzB,IAAQ,UAQlG,EAMH,MAAM0B,EAAe,IAAMzB,EAAAA,cAAAA,QAAAA,KAAO,Y","sources":["webpack://react-todo/./src/pages/index.tsx"],"sourcesContent":["import type { HeadFC, PageProps } from \"gatsby\"\nimport React, { useState } from 'react';\nimport '../styles/App.css';\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface Task {\n  name: string;\n  done: boolean;\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n\n  const [newTask, setNewTask] = useState<string>('');\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [alert, setAlert] = useState<boolean>(false);\n  const [edit, setEdit] = useState<boolean>(false);\n  const [editIndex, setEditIndex] = useState<number>(0);\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault();\n    if(newTask !== ''){\n      if(edit === true){\n        editTask(newTask, editIndex);\n      }\n      else{\n        addTask(newTask);\n      }\n      setNewTask('');\n      setAlert(false);\n    }\n    else{\n      setAlert(true);\n    }\n\n    window.history.replaceState(null, '', window.location.pathname);\n  }\n\n  const addTask = (name: string) => {\n    const newTasks: Task[] = [...tasks, {name, done:false}];\n    setTasks(newTasks);\n  }\n\n  const editTask = (name: string, index: number) => {\n    const newTasks: Task[] = [...tasks]\n    newTasks[index].name = name;\n    setTasks(newTasks);\n    setEdit(false);\n  }\n\n  const removeTask = (index: number) => {\n    if(window.confirm('Are you sure you want to delete this task?')){\n      const newTasks: Task[] = [...tasks];\n      newTasks.splice(index,1);\n      setTasks(newTasks);\n    }\n  }\n\n  const toggleDoneTask = (index: number) => {\n    const newTasks: Task[] = [...tasks];\n    newTasks[index].done = !newTasks[index].done;\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className='w-[95%] max-w-2xl mx-auto '>\n      <h1 className='text-xl font-semibold mt-2'>My ToDo App using Gatsby and Github pages </h1>\n      { edit &&\n        <p className='mt-2'>Edit the task:</p>\n      }\n      { !edit &&\n        <p className='mt-2'>Introduce a new task:</p>\n      }\n      <form onSubmit={handleSubmit} className=\"flex\">\n        <input type=\"text\"\n        className={`block p-2.5 w-full text-gray-900 rounded-l-lg border-l-2 border ${alert ? \"bg-red-50 border-red-300\" : \"bg-gray-50 border-gray-300\"}`} \n        onChange={e => {\n          setNewTask(e.target.value);\n          if(e.target.value !== ''){\n            setAlert(false);\n          }\n          }} value={newTask} />\n        <button className='top-0 right-0 p-2.5 text-white bg-blue-700 rounded-r-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300'>\n          Save\n        </button>\n      </form>\n      { alert &&\n        <p className='text-red-500'>You can't add an empty task</p>\n      }\n      <div className='mt-2'>\n      {\n        tasks.map((task: Task, index: number) => (\n            <div key={index} className=\"flex items-center\">\n              <button className='bg-yellow-300 w-6 mr-2 rounded hover:bg-yellow-500'\n              onClick={e => {\n                setEditIndex(index);\n                setEdit(true);\n                setNewTask(task.name);\n              }}>\n                ðŸ–‰\n              </button>\n              <label style={{textDecoration: task.done ? \"line-through\" : \"\"}} className='w-full text-lg'>{task.name}</label>\n              <input type=\"checkbox\" className='w-4 h-4 mx-2' checked={task.done} onChange={() => toggleDoneTask(index)} />\n              <button className='bg-red-300 w-6 rounded hover:bg-red-500' onClick={() => removeTask(index)}>\n                ðŸ—‘\n              </button>\n            </div>\n          )\n        )\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Home Page</title>\n"],"names":["newTask","setNewTask","useState","tasks","setTasks","alert","setAlert","edit","setEdit","editIndex","setEditIndex","addTask","name","newTasks","done","editTask","index","React","className","onSubmit","e","preventDefault","window","history","replaceState","location","pathname","type","onChange","target","value","map","task","key","onClick","style","textDecoration","checked","toggleDoneTask","confirm","splice","removeTask","Head"],"sourceRoot":""}